openapi: 3.0.0
info:
  title: VRChat API Documentation
  version: 1.0.0
  contact:
    name: Unofficial VRChat API Documentation Project
    url: 'https://github.com/VRChatAPI'
    email: me@ruby.js.org
  termsOfService: 'https://vrchat.com/legal/'
  license:
    url: 'https://github.com/vrchatapi/specification/blob/master/LICENSE'
    name: GNU Affero General Public License v3.0
  description: |-
    **Official statement from VRChat Team**: Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:

    * We do not provide documentation or support for the API.
    * Do not make queries to the API more than once per 60 seconds.
    * Abuse of the API may result in account termination.
    * Access to API endpoints may break at any given time, with no warning.

    As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an [issue on GitHub](https://github.com/vrchatapi/specification/issues) and tell us so we can fix it.
servers:
  - url: 'https://api.vrchat.cloud/api/1'
  - url: 'https://vrchat.com/api/1'
    description: ''
paths:
  /auth:
    get:
      summary: Verify Auth Token
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  ok:
                    type: boolean
                  token:
                    type: string
                    minLength: 1
                required:
                  - ok
                  - token
                x-examples:
                  example-1:
                    ok: true
                    token: authcookie_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          headers: {}
      operationId: get-auth
      parameters: []
      description: Verify whether the currently provided Auth Token is valid.
      security:
        - auth: []
  /auth/user:
    get:
      summary: Login and/or Get Current User Info
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
      operationId: get-auth-user
      security:
        - auth: []
      description: |-
        Login and/or Get user data from your VRChat account.

        If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.

        **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
      parameters:
        - schema:
            type: string
            example: Basic Rm9vcmFjazptYXhmYXgyNTI1ISE=
          in: header
          name: Authorization
          description: Authorization header
components:
  schemas:
    AvatarID:
      type: string
      title: AvatarID
      pattern: 'avtr_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
    CurrentUser:
      description: ''
      type: object
      x-examples: {}
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        username:
          type: string
        displayName:
          type: string
        userIcon:
          type: string
        bio:
          type: string
        bioLinks:
          type: array
          items:
            type: string
        profilePicOverride:
          type: string
        statusDescription:
          type: string
        pastDisplayNames:
          type: array
          items:
            type: string
        hasEmail:
          type: boolean
        hasPendingEmail:
          type: boolean
        obfuscatedEmail:
          type: string
        obfuscatedPendingEmail:
          type: string
        emailVerified:
          type: boolean
        hasBirthday:
          type: boolean
        unsubscribe:
          type: boolean
        statusHistory:
          type: array
          items:
            type: string
        statusFirstTime:
          type: boolean
        friends:
          type: array
          items:
            $ref: '#/components/schemas/UserID'
        friendGroupNames:
          type: array
          items:
            type: string
        currentAvatarImageUrl:
          type: string
        currentAvatarThumbnailImageUrl:
          type: string
        fallbackAvatar:
          $ref: '#/components/schemas/AvatarID'
        currentAvatar:
          $ref: '#/components/schemas/AvatarID'
        currentAvatarAssetUrl:
          type: string
        accountDeletionDate:
          oneOf:
            - $ref: '#/components/schemas/Date'
            - properties: {}
              nullable: true
        acceptedTOSVersion:
          type: number
        steamId:
          type: string
        steamDetails:
          type: object
        oculusId:
          type: string
        hasLoggedInFromClient:
          type: boolean
        homeLocation:
          $ref: '#/components/schemas/WorldID'
        twoFactorAuthEnabled:
          type: boolean
        state:
          $ref: '#/components/schemas/UserState'
        tags:
          type: array
          items:
            type: string
        developerType:
          $ref: '#/components/schemas/DeveloperType'
        last_login:
          $ref: '#/components/schemas/DateTime'
        last_platform:
          $ref: '#/components/schemas/Platform'
        allowAvatarCopying:
          type: boolean
        status:
          $ref: '#/components/schemas/UserStatus'
        date_joined:
          $ref: '#/components/schemas/Date'
        isFriend:
          type: boolean
        friendKey:
          type: string
        onlineFriends:
          type: array
          items:
            $ref: '#/components/schemas/UserID'
        activeFriends:
          type: array
          items:
            $ref: '#/components/schemas/UserID'
        offlineFriends:
          type: array
          items:
            $ref: '#/components/schemas/UserID'
      required:
        - id
        - username
        - displayName
        - userIcon
        - bio
        - bioLinks
        - profilePicOverride
        - statusDescription
        - pastDisplayNames
        - hasEmail
        - hasPendingEmail
        - obfuscatedEmail
        - obfuscatedPendingEmail
        - emailVerified
        - hasBirthday
        - unsubscribe
        - statusHistory
        - statusFirstTime
        - friends
        - friendGroupNames
        - currentAvatarImageUrl
        - currentAvatarThumbnailImageUrl
        - fallbackAvatar
        - currentAvatar
        - currentAvatarAssetUrl
        - accountDeletionDate
        - acceptedTOSVersion
        - steamId
        - steamDetails
        - oculusId
        - hasLoggedInFromClient
        - homeLocation
        - twoFactorAuthEnabled
        - state
        - tags
        - developerType
        - last_login
        - last_platform
        - allowAvatarCopying
        - status
        - date_joined
        - isFriend
        - friendKey
        - onlineFriends
        - activeFriends
        - offlineFriends
    DeveloperType:
      type: string
      title: DeveloperType
      enum:
        - none
        - trusted
        - internal
        - moderator
      default: none
    Date:
      type: string
      title: Date
      pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
      minLength: 10
      maxLength: 10
      example: '1970-01-01'
      format: date
      readOnly: true
    DateTime:
      type: string
      title: DateTime
      pattern: '[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]\.[0-9]{3}Z'
      example: '2011-10-05T14:48:00.000Z'
      format: date-time
      readOnly: true
    Platform:
      type: string
      title: Platform
      enum:
        - standalonewindows
        - android
    UserID:
      type: string
      title: UserID
      example: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
      readOnly: true
    UserState:
      type: string
      title: UserState
      default: offline
      enum:
        - offline
        - active
        - online
      description: |-
        * "online" User is online in VRChat
        * "active" User is online, but not in VRChat
        * "offline" User is offline
    UserStatus:
      type: string
      title: UserStatus
      description: 'Defines the User''s current status, for example "ask me", "join me" or "offline. This status is a combined indicator of their online activity and privacy preference.'
      enum:
        - active
        - join me
        - ask me
        - busy
        - offline
    WorldID:
      type: string
      title: WorldID
      pattern: 'wrld_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
      example: wrld_ba913a96-fac4-4048-a062-9aa5db092812
  securitySchemes:
    apiKey:
      name: API Key
      type: apiKey
      in: cookie
    auth:
      name: Auth Token
      type: apiKey
      in: cookie
      description: ''
security:
  - apiKey: []
tags:
  - name: auth
